library(shinystan)
library(parallel)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
# d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "PGW" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz", "aa"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
print(fit)
fitted_data <- extract(fit)
print(fit)
print(fit, pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz", "aa"),
include = F)
class(fit)
print.stanfit
?print.stanfit
print(fit, pars = c("lp_tilde", "lp"), include = F)
fit@sim$pars_oi
print(fit, pars = c("log_lik"), include = F)
print(fit, pars = c("log_lik"), include = F)
pairs(x = fit, pars = c("log_lik", "energy__", "lp__"), include = F) # log = T
pairs(x = fit, pars = c("log_lik", "energy__", "lp__"), include = F, log = T) # log = T
exp(1.2)
install.packages
install.packages("loo")
install.packages("loo")
library(loo)
print(fit)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
?extract_log_lik
log_lik
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
getOption(x = "mc.cores", default = detectCores())
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
?relative_eff
r_eff
loo <- loo(x = log_lik, r_eff = r_eff, cores = cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
distribution <- "LN" # PGW, LN, or LL
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
# d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LN" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
print(fit, pars = c("log_lik"), include = F)
pairs(x = fit, pars = c("log_lik", "energy__", "lp__"), include = F) # log = T
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
# d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LN" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
?loo-package
?loo
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
print(loo)
plot(loo)
d$obs
library(spBayesSurv)
data(LeukSurv)
?LeukSurv
rstan:::rstudio_stanc("MODELS/LN/LN6.stan")
rstan:::rstudio_stanc("MODELS/LN/LN6.stan")
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
# d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LN" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
rstan:::rstudio_stanc("MODELS/LN/LN6.stan")
rstan:::rstudio_stanc("MODELS/LN/LN6.stan")
rstan:::rstudio_stanc("MODELS/LN/LN6.stan")
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
# d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LN" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
# d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "PGW" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
plot(loo)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
# d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LL" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
print(fit, pars = c("log_lik"), include = F)
pairs(x = fit, pars = c("log_lik", "energy__", "lp__"), include = F) # log = T
par <- fitted_data$mu
par(family = 'LM Roman 10', mfrow = c(1, 1))
par(family = 'LM Roman 10', mfrow = c(1, 1))
plot_chains(par = par, chains = chains, iter = iter, warmup = warmup)
pairs(x = fit, pars = c("log_lik", "energy__", "lp__"), include = F) # log = T
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
plot(loo)
print(fit)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
# d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "PGW" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
print(fit)
exp(1.73)
log(1.73)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("sex", "wbc", "dep"), adj_info = adj_info)
# d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LN" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
print(fit, pars = c("log_lik"), include = F)
d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("age", "sex", "wbc", "dep"), adj_info = adj_info)
library(spdep)
library(rstan)
library(parallel)
library(loo)
library(shinystan)
source("utils.R")
source("data_stan.R")
source("distributions.R")
source("result_processing.R")
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj))) # From "utils.R"
node1 <- nodes$node1
node2 <- nodes$node2
adj_info <- list(N_reg = N_reg, N_edges = length(node1), node1 = node1, node2 = node2)
model <- 6
d <- data_stan(data = data, model = model, cov_tilde = c("age"), cov = c("age", "sex", "wbc", "dep"), adj_info = adj_info)
# d <- data_stan(data = data, model = model)
str(d)
### Stan Modeling
distribution <- "LN" # PGW, LN, or LL
seed <- 1
chains <- 4
iter <- 4e3
warmup <- 2e3
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", distribution, "/", distribution, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
# seed = seed,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = 0.80, max_treedepth = 10),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
time_taken
fitted_data <- extract(fit)
print(fit, pars = c("log_lik"), include = F)
print(loo)
