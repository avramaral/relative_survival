node2 <- c(node2, unique_regions[j])
}
}
}
list(node1 = node1, node2 = node2)
}
# "data_stan.R" functions
validate_model <- function (model, ...) {
model %in% ALL_MDL
}
matrix_spline <- function (data, nonlinear, df, ...) {
X <- matrix(data = 0, nrow = nrow(data), ncol = 0)
if (length(nonlinear)) {
for (i in 1:length(nonlinear)) {
X <- cbind(X, bs(x = data[[nonlinear[i]]], df = df)[, 1:df])
}
colnames(X) <- paste(rep(nonlinear, each = df), rep(1:df, times = length(nonlinear)), sep = "_")
}
X
}
design_matrix <- function (data, N, cov, spl = matrix(data = 0, nrow = 1, ncol = 0), ...) {
X_names <- cov
int <- data.frame()[1:N, ]
X <- as.matrix(cbind(int, data[X_names]))
rownames(X) <- NULL
M <- ncol(X)
if (ncol(spl)) { X <- cbind(spl, X); M <- M + ncol(spl) }
list(X = X, M = M)
}
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("sex", "dep"), nonlinear = c("age", "wbc"), adj_info = adj_info)
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("sex", "dep"), adj_info = adj_info) # nonlinear = c("age", "wbc")
str(d)
model <- "PGWBBSS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("sex", "dep"), adj_info = adj_info) # nonlinear = c("age", "wbc")
str(d)
f
?subset.listw
model <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = model[1])
dist
model <- model[2]
model
model <- "PGWABST"
model <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = model[1])
model <- model[2]
model
fit_stan <- function (data, model, chains = 4, iter = 4e3, warmup = 2e3, adapt_delta = 0.8, max_treedepth = 10, ...) {
if (!validate_model(model = model)) {
stop("Select a valid model.")
}
model <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = model[1])
model <- model[2]
chains <- chains
iter <- iter
warmup <- warmup
start_time <- Sys.time()
fit <- paste("MODELS/", dist, "/", model, ".stan", sep = "")
# fit <- stan(file = paste("MODELS/", dist, "/", model, ".stan", sep = ""),
#             data = d,
#             chains = chains,
#             iter = iter,
#             warmup = warmup,
#             pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
#             include = F,
#             control = list(adapt_delta = adapt_delta, max_treedepth = max_treedepth),
#             cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
list(chains = chains, iter = iter, warmup = warmup, adapt_delta = adapt_delta, max_treedepth = max_treedepth, fit = fit, time_taken = time_taken)
}
r <- fit_stan(data = data, model = model)
fit_stan <- function (data, model, chains = 4, iter = 4e3, warmup = 2e3, adapt_delta = 0.8, max_treedepth = 10, ...) {
if (!validate_model(model = model)) {
stop("Select a valid model.")
}
model <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = model[1])
model <- model[2]
chains <- chains
iter <- iter
warmup <- warmup
start_time <- Sys.time()
fit <- paste("MODELS/", dist, "/", model, ".stan", sep = "")
# fit <- stan(file = paste("MODELS/", dist, "/", model, ".stan", sep = ""),
#             data = d,
#             chains = chains,
#             iter = iter,
#             warmup = warmup,
#             pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
#             include = F,
#             control = list(adapt_delta = adapt_delta, max_treedepth = max_treedepth),
#             cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
list(chains = chains, iter = iter, warmup = warmup, adapt_delta = adapt_delta, max_treedepth = max_treedepth, fit = fit, time_taken = time_taken)
}
model <- "PGWABST"
r <- fit_stan(data = data, model = model)
r
model
gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
paste("MODELS/", dist, "/", model, ".stan", sep = "")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "LN_ABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit)
print(fit, pars = c("log_lik"), include = F)
r$time_taken
print(fit, pars = c("log_lik"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
var(5 * rnorm(1000))
rstan:::rstudio_stanc("MODELS/PGW/PGWABXX.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABXX.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
rstan:::rstudio_stanc("MODELS/LN/LN_ABXX.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABXX.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "LN_ABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "LL_ABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
r$time_taken
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABCD.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABCD.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "LL_ABCD"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
r$time_taken
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
plot(loo)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABCD"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
rstan:::rstudio_stanc("MODELS/PGW/PGWABST.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABST.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABST.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "LN_ABST"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
fit_stan <- function (data, model, chains = 4, iter = 4e3, warmup = 2e3, adapt_delta = 0.8, max_treedepth = 10, ...) {
if (!validate_model(model = model)) {
stop("Select a valid model.")
}
name  <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = model_name[1])
model <- name[2]
if (model == "ABTT") { model <- "ABSS" }
if (model == "AATT" | model == "BBSS" | model == "BBTT") { model <- "AASS" }
if (model == "BBXX") { model <- "AAXX" }
chains <- chains
iter <- iter
warmup <- warmup
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", dist, "/", dist, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = adapt_delta, max_treedepth = max_treedepth),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
list(chains = chains, iter = iter, warmup = warmup, adapt_delta = adapt_delta, max_treedepth = max_treedepth, fit = fit, time_taken = time_taken)
}
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
r$time_taken
r
fit
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABST"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
fit_stan <- function (data, model, chains = 4, iter = 4e3, warmup = 2e3, adapt_delta = 0.8, max_treedepth = 10, ...) {
if (!validate_model(model = model)) {
stop("Select a valid model.")
}
original_model <- model
name  <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = name[1])
model <- name[2]
if (model == "ABTT") { model <- "ABSS" }
if (model == "AATT" | model == "BBSS" | model == "BBTT") { model <- "AASS" }
if (model == "BBXX") { model <- "AAXX" }
chains <- chains
iter <- iter
warmup <- warmup
start_time <- Sys.time()
fit <- stan(file = paste("MODELS/", dist, "/", dist, model, ".stan", sep = ""),
data = d,
chains = chains,
iter = iter,
warmup = warmup,
pars = c("lp_tilde", "lp", "excessHaz", "cumExcessHaz"),
include = F,
control = list(adapt_delta = adapt_delta, max_treedepth = max_treedepth),
cores = getOption(x = "mc.cores", default = detectCores()))
end_time <- Sys.time()
time_taken <- end_time - start_time
list(model = original_model, chains = chains, iter = iter, warmup = warmup, adapt_delta = adapt_delta, max_treedepth = max_treedepth, fit = fit, time_taken = time_taken)
}
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABST"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
source("header.R")
rstan:::rstudio_stanc("MODELS/PGW/PGWABSS.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABSS.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABSS.stan")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABST"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
rstan:::rstudio_stanc("MODELS/LL/LL_AASS.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_AASS.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWAASS.stan")
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
r$model
r$time_taken
rstan:::rstudio_stanc("MODELS/PGW/PGWXBXX.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_XBXX.stan")
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c("age"), adj_info = adj_info)
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
str(d)
source("header.R")
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
str(d)
rstan:::rstudio_stanc("MODELS/PGW/PGWAASS.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWAASS.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_AASS.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWAASS"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
log_lik <- extract_log_lik(stanfit = fit, merge_chains = F)
r_eff <- relative_eff(exp(log_lik), cores = getOption(x = "mc.cores", default = detectCores()))
loo <- loo(x = log_lik, r_eff = r_eff, cores = getOption(x = "mc.cores", default = detectCores()))
print(loo)
rstan:::rstudio_stanc("MODELS/PGW/PGWXBXX.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWXBXT.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWAXXX.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABXX.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABXT.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABST.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABSS.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWABCD.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWAAXX.stan")
rstan:::rstudio_stanc("MODELS/PGW/PGWAASS.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "ABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map)
model <- "PGWABXX"
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = data, model = model)
fit <- r$fit
print(fit, pars = c("log_lik"), include = F)
rstan:::rstudio_stanc("MODELS/LL/LL_XBXT.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_AXXX.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABXX.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABXT.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABST.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABSS.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_ABCD.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_AAXX.stan")
rstan:::rstudio_stanc("MODELS/LL/LL_AASS.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_XBXX.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_XBXT.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_AXXX.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABXX.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABXX.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABXT.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABST.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABSS.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_ABCD.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_AAXX.stan")
rstan:::rstudio_stanc("MODELS/LN/LN_AASS.stan")
