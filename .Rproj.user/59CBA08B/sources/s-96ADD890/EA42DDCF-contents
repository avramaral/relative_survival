library(spdep)
library(rstan)

data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")

adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")

# Data Preparation

unce <- which(data$cens == 0)
cens <- which(data$cens == 1)

N <- nrow(data)
N_unce <- length(unce)
N_cens <- N - N_unce

X_names <- c("age", "sex", "wbc", "dep")
X <- as.matrix(cbind(rep(1, N), data[X_names])) # Design Matrix
colnames(X) <- c("int", X_names) # Intercept + covariates
M <- ncol(X)

t_unce <- data$time[unce]
t_cens <- data$time[cens]
X_unce <- X[unce, ]; rownames(X_unce) <- 1:nrow(X_unce)
X_cens <- X[cens, ]; rownames(X_cens) <- 1:nrow(X_cens) # For performance enhancement
p_hazU <- data$pop.haz[unce]
p_hazC <- data$pop.haz[cens]

data_stan <- list(N = N,
                  M = M,
                  N_cens = N_cens,
                  N_unce = N_unce,
                  t_cens = t_cens,
                  t_unce = t_unce,
                  p_hazU = p_hazU,
                  p_hazC = p_hazC,
                  X_cens = X_cens,
                  X_unce = X_unce #, still missing information about the adjacency matrix
                 )

# Stan Modeling

chains <- 4
iter <- 50e3
warmup <- 48e3

start.time <- Sys.time()

fit <- stan(file = "model.stan", 
            data = data_stan,
            chains = chains,
            iter = iter,
            warmup = warmup,
            control = list(adapt_delta = 0.99)) # Change initial parameters

end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken

a <- rstan::extract(fit)
