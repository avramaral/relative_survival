age = LeukSurv$age,
sex = LeukSurv$sex, # 0, if female, and 1, if male
wbc = LeukSurv$wbc, # White blood cell count
dep = LeukSurv$tpi)
str(leuk)
library(spBayesSurv)
data(LeukSurv)
# saveRDS(object = LeukSurv, file = "DATA/LeukSurv.rds")
n <- nrow(LeukSurv)
time <- LeukSurv$time / 365
quintiles <- quantile(LeukSurv$tpi, c(0.2, 0.4, 0.6, 0.8))
for (i in 1:n) {
if(LeukSurv$tpi[i] <= quintiles[1]) {
LeukSurv$tpi_transf[i] <- 1 } else if(quintiles[1] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[2]) {
LeukSurv$tpi_transf[i] <- 2 } else if(quintiles[2] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[3]) {
LeukSurv$tpi_transf[i] <- 3 } else if(quintiles[3] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[4]) {
LeukSurv$tpi_transf[i] <- 4 } else {
LeukSurv$tpi_transf[i] <- 5 } # Townsend (deprivation) score (the higher, the worse)
}
leuk <- data.frame(index = 1:n,
time = time,
cens = LeukSurv$cens,
region = LeukSurv$district,
age = LeukSurv$age,
sex = LeukSurv$sex, # 0, if female, and 1, if male
wbc = LeukSurv$wbc, # White blood cell count
dep = LeukSurv$tpi,
dep_transf = LeukSurv$tpi_transf)
str(leuk)
lt <- as.data.frame(read.table("DATA/ENGLAND_LT_2010_2015.txt", header = T))
lt <- lt[lt$X_year == 2010, ] # 2010 is the earliest date
lt <- lt[lt$gor == 2, ] # Government Office Regions: North West England (2)
lt <- lt[, c('sex', 'dep', 'age', 'rate')]
lt$sex <- lt$sex - 1
str(lt)
leuk
class(leuk)
head(leuk)
head(lt)
data <- merge(x = leuk, y = lt, by = c("sex", "dep", "age"), all.x = T)
head(data)
lt
colnames(lt)
lt <- as.data.frame(read.table("DATA/ENGLAND_LT_2010_2015.txt", header = T))
lt <- lt[lt$X_year == 2010, ] # 2010 is the earliest date
lt <- lt[lt$gor == 2, ] # Government Office Regions: North West England (2)
lt <- lt[, c('sex', 'dep', 'age', 'rate')]
colnames(lt) <- c('sex', 'dep_transf', 'age', 'rate')
lt$sex <- lt$sex - 1
str(lt)
data <- merge(x = leuk, y = lt, by = c("sex", "dep", "age"), all.x = T)
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
data
head(data)
data <- readRDS(file = "DATA/data.rds")
head(data)
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
data <- data[order(data$index), ]
head(data)
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
data <- data[order(data$index), ]
data <- cbind(data[, c(5:7, 3, 1, 8:10)]) # remove "dep_transf" (2) and "index" (4)
rownames(data) <- 1:nrow(data)
colnames(data)
head(data)
colnames(data) <- c(colnames(data)[1:7], "pop.haz")
head(data)
scale(LeukSurv$tpi)
#####################
### Survival Data ###
#####################
library(spBayesSurv)
data(LeukSurv)
# saveRDS(object = LeukSurv, file = "DATA/LeukSurv.rds")
n <- nrow(LeukSurv)
time <- LeukSurv$time / 365
quintiles <- quantile(LeukSurv$tpi, c(0.2, 0.4, 0.6, 0.8))
for (i in 1:n) {
if(LeukSurv$tpi[i] <= quintiles[1]) {
LeukSurv$tpi_transf[i] <- 1 } else if(quintiles[1] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[2]) {
LeukSurv$tpi_transf[i] <- 2 } else if(quintiles[2] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[3]) {
LeukSurv$tpi_transf[i] <- 3 } else if(quintiles[3] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[4]) {
LeukSurv$tpi_transf[i] <- 4 } else {
LeukSurv$tpi_transf[i] <- 5 } # Townsend (deprivation) score (the higher, the worse)
}
leuk <- data.frame(index = 1:n,
time = time,
cens = LeukSurv$cens,
region = LeukSurv$district,
age = scale(LeukSurv$age),
sex = LeukSurv$sex, # 0, if female, and 1, if male
wbc = scale(LeukSurv$wbc), # White blood cell count
dep = scale(LeukSurv$tpi),
dep_transf = LeukSurv$tpi_transf)
str(leuk)
##################
### Life Table ###
##################
lt <- as.data.frame(read.table("DATA/ENGLAND_LT_2010_2015.txt", header = T))
lt <- lt[lt$X_year == 2010, ] # 2010 is the earliest date
lt <- lt[lt$gor == 2, ] # Government Office Regions: North West England (2)
lt <- lt[, c('sex', 'dep', 'age', 'rate')]
colnames(lt) <- c('sex', 'dep_transf', 'age', 'rate')
lt$sex <- lt$sex - 1
str(lt)
####################
### Merging data ###
####################
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
data <- data[order(data$index), ]
data <- cbind(data[, c(5:7, 3, 1, 8:10)]) # remove "dep_transf" (2) and "index" (4)
rownames(data) <- 1:nrow(data)
colnames(data) <- c(colnames(data)[1:7], "pop.haz")
str(data)
# saveRDS(object = data, file = "DATA/data.rds")
######################
### Geo Boundaries ###
######################
library(sp)
library(R2BayesX)
map <- read.bnd(file = system.file("otherdata/nwengland.bnd", package = "spBayesSurv"))
map <- bnd2sp(bndObject = map)
proj4string(map) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
# plot(map)
# saveRDS(object = map, file = "DATA/nwengland_map.rds")
head(data)
head(lt)
library(spBayesSurv)
data(LeukSurv)
n <- nrow(LeukSurv)
time <- LeukSurv$time / 365
quintiles <- quantile(LeukSurv$tpi, c(0.2, 0.4, 0.6, 0.8))
for (i in 1:n) {
if(LeukSurv$tpi[i] <= quintiles[1]) {
LeukSurv$tpi_transf[i] <- 1 } else if(quintiles[1] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[2]) {
LeukSurv$tpi_transf[i] <- 2 } else if(quintiles[2] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[3]) {
LeukSurv$tpi_transf[i] <- 3 } else if(quintiles[3] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[4]) {
LeukSurv$tpi_transf[i] <- 4 } else {
LeukSurv$tpi_transf[i] <- 5 } # Townsend (deprivation) score (the higher, the worse)
}
leuk <- data.frame(index = 1:n,
time = time,
cens = LeukSurv$cens,
region = LeukSurv$district,
age = scale(LeukSurv$age),
sex = LeukSurv$sex, # 0, if female, and 1, if male
wbc = scale(LeukSurv$wbc), # White blood cell count
dep = scale(LeukSurv$tpi),
dep_transf = LeukSurv$tpi_transf)
str(leuk)
lt <- as.data.frame(read.table("DATA/ENGLAND_LT_2010_2015.txt", header = T))
lt <- lt[lt$X_year == 2010, ] # 2010 is the earliest date
lt <- lt[lt$gor == 2, ] # Government Office Regions: North West England (2)
lt <- lt[, c('sex', 'dep', 'age', 'rate')]
colnames(lt) <- c('sex', 'dep_transf', 'age', 'rate')
lt$sex <- lt$sex - 1
str(lt)
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
head(data)
head(leuk)
head(lt)
lt$age
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
head(daa)
head(data)
data$rate
tail(data, 43)
head(leuk)
head(lt)
library(spBayesSurv)
data(LeukSurv)
# saveRDS(object = LeukSurv, file = "DATA/LeukSurv.rds")
n <- nrow(LeukSurv)
time <- LeukSurv$time / 365
quintiles <- quantile(LeukSurv$tpi, c(0.2, 0.4, 0.6, 0.8))
for (i in 1:n) {
if(LeukSurv$tpi[i] <= quintiles[1]) {
LeukSurv$tpi_transf[i] <- 1 } else if(quintiles[1] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[2]) {
LeukSurv$tpi_transf[i] <- 2 } else if(quintiles[2] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[3]) {
LeukSurv$tpi_transf[i] <- 3 } else if(quintiles[3] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[4]) {
LeukSurv$tpi_transf[i] <- 4 } else {
LeukSurv$tpi_transf[i] <- 5 } # Townsend (deprivation) score (the higher, the worse)
}
leuk <- data.frame(index = 1:n,
time = time,
cens = LeukSurv$cens,
region = LeukSurv$district,
age = LeukSurv$age,
sex = LeukSurv$sex, # 0, if female, and 1, if male
wbc = LeukSurv$wbc, # White blood cell count
dep = LeukSurv$tpi,
dep_transf = LeukSurv$tpi_transf)
str(leuk)
##################
### Life Table ###
##################
lt <- as.data.frame(read.table("DATA/ENGLAND_LT_2010_2015.txt", header = T))
lt <- lt[lt$X_year == 2010, ] # 2010 is the earliest date
lt <- lt[lt$gor == 2, ] # Government Office Regions: North West England (2)
lt <- lt[, c('sex', 'dep', 'age', 'rate')]
colnames(lt) <- c('sex', 'dep_transf', 'age', 'rate')
lt$sex <- lt$sex - 1
str(lt)
####################
### Merging data ###
####################
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
data <- data[order(data$index), ]
data <- cbind(data[, c(5:7, 3, 1, 8:10)]) # remove "dep_transf" (2) and "index" (4)
rownames(data) <- 1:nrow(data)
colnames(data) <- c(colnames(data)[1:7], "pop.haz")
str(data)
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
str(data)
head(data)
#####################
### Survival Data ###
#####################
library(spBayesSurv)
data(LeukSurv)
saveRDS(object = LeukSurv, file = "DATA/LeukSurv.rds")
n <- nrow(LeukSurv)
time <- LeukSurv$time / 365
quintiles <- quantile(LeukSurv$tpi, c(0.2, 0.4, 0.6, 0.8))
for (i in 1:n) {
if(LeukSurv$tpi[i] <= quintiles[1]) {
LeukSurv$tpi_transf[i] <- 1 } else if(quintiles[1] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[2]) {
LeukSurv$tpi_transf[i] <- 2 } else if(quintiles[2] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[3]) {
LeukSurv$tpi_transf[i] <- 3 } else if(quintiles[3] < LeukSurv$tpi[i] & LeukSurv$tpi[i] <= quintiles[4]) {
LeukSurv$tpi_transf[i] <- 4 } else {
LeukSurv$tpi_transf[i] <- 5 } # Townsend (deprivation) score (the higher, the worse)
}
leuk <- data.frame(index = 1:n,
time = time,
cens = LeukSurv$cens,
region = LeukSurv$district,
age = LeukSurv$age,
sex = LeukSurv$sex, # 0, if female, and 1, if male
wbc = LeukSurv$wbc, # White blood cell count
dep = LeukSurv$tpi,
dep_transf = LeukSurv$tpi_transf)
str(leuk)
##################
### Life Table ###
##################
lt <- as.data.frame(read.table("DATA/ENGLAND_LT_2010_2015.txt", header = T))
lt <- lt[lt$X_year == 2010, ] # 2010 is the earliest date
lt <- lt[lt$gor == 2, ] # Government Office Regions: North West England (2)
lt <- lt[, c('sex', 'dep', 'age', 'rate')]
colnames(lt) <- c('sex', 'dep_transf', 'age', 'rate')
lt$sex <- lt$sex - 1
str(lt)
####################
### Merging data ###
####################
data <- merge(x = leuk, y = lt, by = c("sex", "dep_transf", "age"), all.x = T)
data <- data[order(data$index), ]
data <- cbind(data[, c(5:7, 3, 1, 8:10)]) # remove "dep_transf" (2) and "index" (4)
rownames(data) <- 1:nrow(data)
colnames(data) <- c(colnames(data)[1:7], "pop.haz")
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
str(data)
saveRDS(object = data, file = "DATA/data.rds")
######################
### Geo Boundaries ###
######################
library(sp)
library(R2BayesX)
map <- read.bnd(file = system.file("otherdata/nwengland.bnd", package = "spBayesSurv"))
map <- bnd2sp(bndObject = map)
proj4string(map) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
# plot(map)
saveRDS(object = map, file = "DATA/nwengland_map.rds")
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
adj
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
unce <- which(data$cens == 0)
cens <- which(data$cens == 1)
unce <- which(data$cens == 0)
cens <- which(data$cens == 1)
unce <- which(data$cens == 0)
cens <- which(data$cens == 1)
N <- nrow(data)
N_unce <- length(unce)
N_cens <- N - N_unce
X_names <- c("age", "sex", "wbc", "dep")
X <- as.matrix(cbind(rep(1, N), data[X_names])) # Design Matrix
colnames(X) <- c("int", X_names) # Intercept + covariates
M <- ncol(X)
X
# Design matrices
# X tilde
X_tilde_names <- c("age")
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X) <- c("int", X_tilde_names)
M_tilde <- ncol(X)
# Design matrices
# X tilde
X_tilde_names <- c("age")
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X) <- c("int", X_tilde_names)
c("int", X_tilde_names)
colnames(X)
# Design matrices
# X tilde
X_tilde_names <- c("age")
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X_tilde) <- c("int", X_tilde_names)
M_tilde <- ncol(X)
cens
N_cens
length(cens)
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
# Data Preparation
unce <- which(data$cens == 0)
cens <- which(data$cens == 1)
N <- nrow(data)
N_unce <- length(unce)
N_cens <- N - N_unce
# Design matrices
# X tilde
X_tilde_names <- c("age", "sex", "wbc", "dep") # Select proper covariates
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X_tilde) <- c("int", X_tilde_names)
M_tilde <- ncol(X)
# X
X_names <- c("age", "sex", "wbc", "dep")
X <- as.matrix(cbind(rep(1, N), data[X_names]))
colnames(X) <- c("int", X_names) # Intercept + covariates
M <- ncol(X)
data_stan <- list(N = N,
N_cens = N_cens,
M_tilde = M_tilde,
M = M,
cens = cens,
time = data$time,
pop_haz = data$pop.haz,
X_tilde = X_tilde,
X = X #, still missing information about the adjacency matrix
)
# Stan Modeling
chains <- 4
iter <- 50e3
warmup <- 48e3
start.time <- Sys.time()
fit <- stan(file = "model2.stan",
data = data_stan,
chains = chains,
iter = iter,
warmup = warmup,
control = list(adapt_delta = 0.99)) # Change initial parameters
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
library(spdep)
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
unce <- which(data$cens == 0)
cens <- which(data$cens == 1)
N <- nrow(data)
N_unce <- length(unce)
N_cens <- N - N_unce
# Design matrices
# X tilde
X_tilde_names <- c("age", "sex", "wbc", "dep") # Select proper covariates
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X_tilde) <- c("int", X_tilde_names)
M_tilde <- ncol(X)
# X
X_names <- c("age", "sex", "wbc", "dep")
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
unce <- which(data$cens == 0)
cens <- which(data$cens == 1)
N <- nrow(data)
N_unce <- length(unce)
N_cens <- N - N_unce
# Design matrices
# X tilde
X_tilde_names <- c("age", "sex", "wbc", "dep") # Select proper covariates
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X_tilde) <- c("int", X_tilde_names)
M_tilde <- ncol(X_tilde)
# X
X_names <- c("age", "sex", "wbc", "dep")
X <- as.matrix(cbind(rep(1, N), data[X_names]))
colnames(X) <- c("int", X_names) # Intercept + covariates
M <- ncol(X)
data_stan <- list(N = N,
N_cens = N_cens,
M_tilde = M_tilde,
M = M,
cens = cens,
time = data$time,
pop_haz = data$pop.haz,
X_tilde = X_tilde,
X = X #, still missing information about the adjacency matrix
)
# Stan Modeling
chains <- 4
iter <- 50e3
warmup <- 48e3
start.time <- Sys.time()
fit <- stan(file = "model2.stan",
data = data_stan,
chains = chains,
iter = iter,
warmup = warmup,
control = list(adapt_delta = 0.99)) # Change initial parameters
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
library(spdep)
library(rstan)
data <- readRDS(file = "DATA/data.rds")
map  <- readRDS(file = "DATA/nwengland_map.rds")
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
### Data Preparation
cens <- which(data$cens == 1)
N <- nrow(data)
N_cens <- length(cens)
# Design matrices
# X tilde
# X_tilde_names <- c("age", "sex", "wbc", "dep") # Select proper covariates
X_tilde_names <- c("age")
X_tilde <- as.matrix(cbind(rep(1, N), data[X_tilde_names]))
colnames(X_tilde) <- c("int", X_tilde_names)
M_tilde <- ncol(X_tilde)
# X
# X_names <- c("age", "sex", "wbc", "dep")
X_names <- c("sex", "wbc", "dep") # Exclude "age"
X <- as.matrix(cbind(rep(1, N), data[X_names]))
colnames(X) <- c("int", X_names) # Intercept + covariates
M <- ncol(X)
# Stan data object
data_stan <- list(N = N,
N_cens = N_cens,
M_tilde = M_tilde,
M = M,
cens = cens,
time = data$time,
pop_haz = data$pop.haz,
X_tilde = X_tilde,
X = X #, still missing information about the adjacency matrix
)
head(data_stan)
str(data_stan)
chains <- 2
iter <- 4e3
warmup <- 2e3
start.time <- Sys.time()
fit <- stan(file = "model2.stan",
data = data_stan,
chains = chains,
iter = iter,
warmup = warmup,
control = list(adapt_delta = 0.99)) # Change initial parameters
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
saveRDS(object = fit, file = "DATA/fitted_no_random_effects.rds")
a <- rstan::extract(fit)
a$alpha
dim(a$alpha)
plot(a$alpha[, 2], type = 'l')
plot(a$alpha[, 1], type = 'l')
plot(a$beta[, 1], type = 'l')
plot(a$beta[, 2], type = 'l')
plot(a$beta[, 3], type = 'l')
plot(a$beta[, 4], type = 'l')
plot(a$beta[, 5], type = 'l')
plot(a$eta, type = 'l')
plot(a$eta[,1], type = 'l')
a$eta
plot(a$beta, type = 'l')
plot(a$eta, type = 'l')
plot(a$nu, type = 'l')
plot(a$theta, type = 'l')
fitted_data <- rstan::extract(fit)
