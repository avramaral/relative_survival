bridge <- bridge_sampler(samples = r$fit, cores = getOption(x = "mc.cores", default = detectCores()), silent = T)
saveRDS(object = bridge, file = paste("FITTED_MODELS/", dist, "/bridge_", model, ".rds", sep = ""))
source("header.R")
model <- "LN_ABYZ"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
r <- readRDS(file = paste("FITTED_MODELS/", dist, "/", model, ".rds", sep = ""))
fit <- r$fit
print(fit, pars = c("log_lik", "u_tilde", "v", "v_tilde"), include = F)
print(fit, pars = c("log_lik"), include = F)
pairs(x = fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
traceplot(object = fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
traceplot(object = fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde", "convolved_re", "convolved_re_tilde"), include = F)
pairs(x = fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde", "convolved_re", "convolved_re_tilde"), include = F)
models <- c("LN_ABCD", "LN_ABST", "LL_ABCD", "LL_ABST")
bridges <- list()
for (i in 1:length(models)) {
print(i)
bridges[[i]] <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/bridge_", models[i], ".rds", sep = ""))
}
distributions <- sapply(X = models, FUN = function (x) { gsub(pattern = "_", replacement = "", x = substring(text = x, first = c(1, 4), last = c(3, 7))[1]) })
for (i in 1:length(models)) {
print(i)
bridges[[i]] <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/bridge_", models[i], ".rds", sep = ""))
}
models
distributions
models <- c("LN_ABCD", "LL_ABCD", "LL_ABST")
distributions <- sapply(X = models, FUN = function (x) { gsub(pattern = "_", replacement = "", x = substring(text = x, first = c(1, 4), last = c(3, 7))[1]) })
bridges <- list()
for (i in 1:length(models)) {
print(i)
bridges[[i]] <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/bridge_", models[i], ".rds", sep = ""))
}
bayes_factor(x1 = bridges[[1]], x2 = bridges[[2]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[3]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[4]])
bayes_factor(x1 = bridges[[2]], x2 = bridges[[3]])
bayes_factor(x1 = bridges[[2]], x2 = bridges[[4]])
bayes_factor(x1 = bridges[[3]], x2 = bridges[[4]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[2]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[3]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[4]])
for (i in 1:length(models)) {
print(i)
temp <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/", models[i], ".rds", sep = ""))
fits[[i]] <- temp$fit
loos[[i]] <- compute_loo(fit = fits[[i]])
}
models
for (i in 1:length(models)) {
print(i)
temp <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/", models[i], ".rds", sep = ""))
fits[[i]] <- temp$fit
loos[[i]] <- compute_loo(fit = fits[[i]])
}
fits <- list()
loos <- list()
for (i in 1:length(models)) {
print(i)
temp <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/", models[i], ".rds", sep = ""))
fits[[i]] <- temp$fit
loos[[i]] <- compute_loo(fit = fits[[i]])
}
models
loo_compare(loos) # Refitting the model for the outliers, or relying only on the Bayes Factor
loos[[1]]
loos[[2]]
loos[[3]]
bayes_factor(x1 = bridges[[1]], x2 = bridges[[2]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[3]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[4]])
bayes_factor(x1 = bridges[[2]], x2 = bridges[[3]])
bayes_factor(x1 = bridges[[3]], x2 = bridges[[1]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[2]])
bayes_factor(x1 = bridges[[2]], x2 = bridges[[1]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[3]])
bayes_factor(x1 = bridges[[3]], x2 = bridges[[1]])
bayes_factor(x1 = bridges[[1]], x2 = bridges[[2]])
bayes_factor(x1 = bridges[[2]], x2 = bridges[[3]])
data <- readRDS(file = "DATA/leuk.rds")
map <- readRDS(file = "DATA/nwengland_map.rds")
time <- seq(from = 0.025, to = 4, by = 0.025)
mu_age <- mean(data$age)
sd_age <- sd(data$age)
age <- 40 + time
age <- (age - mu_age) / sd_age
X_tilde <- matrix(data = c(age), ncol = 1, byrow = F)
X <- matrix(data = c(age, rep(1, length(time)), rep(0.5, length(time)), rep(1.2, length(time))), ncol = 4, byrow = F)
if (!class(fit) == "stanfit") {
stop("'fit' must be a 'stanfit' object.")
}
fitted_data <- extract(fit)
fix_coeff <- substring(text = model, first = c(4, 5), last = c(4, 5))
if (fix_coeff[1] == fix_coeff[2]) {
m_tilde <- check_n_cov(var = fitted_data$beta)
m <- check_n_cov(var = fitted_data$beta)
} else {
m_tilde <- check_n_cov(var = fitted_data$alpha)
m <- check_n_cov(var = fitted_data$beta)
}
if ((ncol(X_tilde) != m_tilde) | (ncol(X) != m)) {
stop("Provide 'X' and 'X_tilde' with correct number of columns.")
}
name  <- substring(text = model, first = c(1, 4), last = c(3, 7))
dist  <- gsub(pattern = "_", replacement = "", x = name[1])
model <- name[2]
spatial <- ifelse(test = as.logical(sum(str_detect(string = model, pattern = c("C", "D", "S", "T", "Y", "Z")))), yes = T, no = F)
if (!spatial) {
N_reg <- 1
} else {
if (model %in% c("ABCD", "ABXD", "ABCC", "ABDD", "XBXD", "AACC", "AADD", "BBCC", "BBDD")) {
N_reg <- ncol(fitted_data$v)
} else {
N_reg <- ncol(fitted_data$u)
}
}
N_samples <- length(fitted_data$lp__)
excHaz    <- array(data = 0, dim = c(length(time), N_samples, N_reg))
excCumHaz <- array(data = 0, dim = c(length(time), N_samples, N_reg))
netSur    <- array(data = 0, dim = c(length(time), N_samples, N_reg))
j=1
cat(ifelse(test = spatial, yes = paste("\nRegion ", sprintf('%02d', j), "\n", sep = ""), no = "ALL\n"))
i=1
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = X_tilde, coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = X, coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = X_tilde, coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = X, coeff = fitted_data$beta[i, ])
}
compute_lp
add_re
lp_tilde
dim(lp_tilde)
lp_tilde[1:20, 1]
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = X_tilde, coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = X, coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = X_tilde, coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = X, coeff = fitted_data$beta[i, ])
}
part     <- add_re(fitted_data = fitted_data, model = model, lp_tilde = lp_tilde, lp = lp, i = i, j = j)
lp_tilde <- part$lp_re_tilde
lp_tilde[1:20, 1]
print(fit, pars = c("log_lik", "u_tilde", "u", "v_tilde", "v", "convolved_re", "convolved_re_tilde"), include = F)
rstan:::rstudio_stanc("MODELS/LN/LN_ABYZ.stan")
print(fit, pars = c("log_lik", "u_tilde", "u", "v_tilde", "v", "convolved_re", "convolved_re_tilde"), include = F)
print(fit, pars = c("log_lik", "v_tilde", "v","convolved_re", "convolved_re_tilde"), include = F)
print(fit, pars = c("log_lik", "v_tilde", "v", "convolved_re", "convolved_re_tilde"), include = F)
print(fit, pars = c("log_lik", "u_tilde", "u", "convolved_re", "convolved_re_tilde"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map, sf = T)
model <- "LN_ABYZ"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("age", "wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = d, model = model)
print(r$fit, pars = c("log_lik", "u_tilde", "u", "v_tilde", "v"), include = F)
# pairs(x = r$fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
# traceplot(object = r$fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
saveRDS(object = r, file = paste("FITTED_MODELS/", dist, "/", model, ".rds", sep = ""))
r$time_taken
# Bayes Factor
bridge <- bridge_sampler(samples = r$fit, cores = getOption(x = "mc.cores", default = detectCores()), silent = T)
saveRDS(object = bridge, file = paste("FITTED_MODELS/", dist, "/bridge_", model, ".rds", sep = ""))
traceplot(object = r$fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
map
if (!class(map) == "SpatialPolygons") {
stop("'map' is not a 'SpatialPolygons' object.")
}
adj <- poly2nb(pl = map)
adj <- nb2mat(neighbours = adj, style = "B")
N_reg <- nrow(adj)
nodes <- adj_quantities(adj, as.numeric(rownames(adj)))
node1 <- nodes$node1
node2 <- nodes$node2
sf
adj.sparse <- sparseMatrix(i = node1, j = node2, x = 1, symmetric = TRUE)
Q <- Diagonal(n = N_reg, x = rowSums(adj.sparse)) - adj.sparse
Q_pert <- Q + Diagonal(n = N_reg) * max(diag(Q)) * sqrt(.Machine$double.eps)
Q_inv <- inla.qinv(Q = Q_pert, constr = list(A = matrix(data = 1, nrow = 1, ncol = N_reg), e = 0))
Q_inv
?inla.scale.model
inla.scale.model(Q = adj, constr = list(A = matrix(1, 1, 24), e = 0))
adf
adj
adj.sparse
inla.scale.model(Q = adj.sparse, constr = list(A = matrix(1, 1, 24), e = 0))
inla.scale.model(Q = Q, constr = list(A = matrix(1, 1, 24), e = 0))
scaling_factor
Q_inv
inla.scale.model(Q = Q_pert, constr = list(A = matrix(1, 1, 24), e = 0))
exp(mean(log(inla.scale.model(Q = Q_pert, constr = list(A = matrix(1, 1, 24), e = 0)))))
exp(mean(log(diag(inla.scale.model(Q = Q_pert, constr = list(A = matrix(1, 1, 24), e = 0))))))
scaling_factor
scaling_factor <- exp(mean(log(diag(Q_inv))))
scaling_factor
N_reg
?inla.qinv
eee <- extract(fit)
fit
eee<-extract(r$fit)
dim(eee$convolved_re)
dim(eee$convolved_re[, 1])
var(eee$convolved_re[, 1] - eee$v[, 1])
var(eee$convolved_re[, 2] - eee$v[, 2])
var(eee$convolved_re[, 5] - eee$v[, 5])
var(eee$convolved_re[, 8] - eee$v[, 8])
var(eee$convolved_re[, 8] - eee$v[, 9])
var(eee$convolved_re[, 21] - eee$v[, 21])
rstan:::rstudio_stanc("MODELS/LN/LN_ABYZ.stan")
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map, sf = T)
model <- "GG_ABST"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("age", "wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = d, model = model, max_treedepth = 12)
print(r$fit, pars = c("log_lik", "u_tilde", "u", "v_tilde", "v"), include = F)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map, sf = T)
model <- "LN_ABYZ"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("age", "wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = d, model = model, max_treedepth = 12)
print(r$fit, pars = c("log_lik", "u_tilde", "u", "v_tilde", "v"), include = F)
source("header.R")
models
ALL_MDL
ALL_DST <- c("PGW", "LN_", "LL_")
ALL_CFT <- c("ABST",
"ABXT",
"ABSS",
"XBXT",
"AASS",
"ABXX",
"XBXX",
"AAXX",
"AXXX")
ALL_MDL <- do.call(what = paste, args = c(expand.grid(ALL_DST, ALL_CFT), sep = ""))
ALL_MDL
models <- ALL_MDL
ALL_DST <- c("PGW", "LN_", "LL_", "GG_", "GAM")
ALL_CFT <- c("ABCD",
"ABXD",
"ABCC", "ABDD",
"XBXD",
"AACC", "AADD", "BBCC", "BBDD",
"ABYZ",
"ABXZ",
"ABYY", "ABZZ",
"XBXZ",
"AAYY", "AAZZ", "BBYY", "BBZZ",
"ABST",
"ABXT",
"ABSS", "ABTT",
"XBXT",
"AASS", "AATT", "BBSS", "BBTT",
"ABXX",
"XBXX",
"AAXX", "BBXX",
"AXXX")
ALL_MDL <- do.call(what = paste, args = c(expand.grid(ALL_DST, ALL_CFT), sep = ""))
models
distributions <- sapply(X = models, FUN = function (x) { gsub(pattern = "_", replacement = "", x = substring(text = x, first = c(1, 4), last = c(3, 7))[1]) })
fits <- list()
loos <- list()
for (i in 1:length(models)) {
print(i)
temp <- readRDS(file = paste("FITTED_MODELS/", distributions[i], "/", models[i], ".rds", sep = ""))
fits[[i]] <- temp$fit
loos[[i]] <- compute_loo(fit = fits[[i]])
}
loo_compare(loos) # Refitting the model for the outliers, or relying only on the Bayes Factor
models
model <- "LL_ABST"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
r <- readRDS(file = paste("FITTED_MODELS/", dist, "/", model, ".rds", sep = ""))
fit <- r$fit
data <- readRDS(file = "DATA/leuk.rds")
map <- readRDS(file = "DATA/nwengland_map.rds")
time <- seq(from = 0.025, to = 4, by = 0.025)
mu_age <- mean(data$age)
sd_age <- sd(data$age)
age <- 40 + time
age <- (age - mu_age) / sd_age
X_tilde <- matrix(data = c(age), ncol = 1, byrow = F)
X <- matrix(data = c(age, rep(1, length(time)), rep(0.5, length(time)), rep(1.2, length(time))), ncol = 4, byrow = F)
res <- result_processing(fit = fit, model = model, time = time, X_tilde = X_tilde, X = X)
excHaz <- res$excHaz
excCumHaz <- res$excCumHaz
netSur <- res$netSur
data
d
d$X
age
data <- readRDS(file = "DATA/leuk.rds")
map <- readRDS(file = "DATA/nwengland_map.rds")
time <- seq(from = 0.025, to = 4, by = 0.025)
mu_age <- mean(data$age)
sd_age <- sd(data$age)
age <- 40 + time
age <- (age - mu_age) / sd_age
X_tilde <- matrix(data = c(age), ncol = 1, byrow = F)
X <- matrix(data = c(age, rep(0.5, length(time)), rep(1, length(time)), rep(1.2, length(time))), ncol = 4, byrow = F)
res <- result_processing(fit = fit, model = model, time = time, X_tilde = X_tilde, X = X)
excHaz <- res$excHaz
excCumHaz <- res$excCumHaz
netSur <- res$netSur
plot_summary_curve(time = time, obj = excHaz, region = region, ylab = "Excess Hazard", dist = dist, return_values = T)
region <- 1
par(family = 'LM Roman 10', mfrow = c(1, 1))
plot_summary_curve(time = time, obj = excHaz, region = region, ylab = "Excess Hazard", dist = dist, return_values = T)
plot_summary_curve(time = time, obj = excCumHaz, region = region, ylab = "Excess Cumulative Hazard", dist = dist, return_values = T)
plot_summary_curve(time = time, obj = netSur, region = region, dist = dist, return_values = T)
plot_all_regions(time = time, obj = excHaz, N_reg = N_reg, ylab = "Excess Hazard", dist = dist, return_values = T)
par(family = 'LM Roman 10', mfrow = c(1, 3))
pL <- plot_map(map = map, obj = netSur, t = which(time == 1), summary = "L", title = "Net Survival (.025)", commom_legend = T)
pM <- plot_map(map = map, obj = netSur, t = which(time == 1), summary = "M", title = "Net Survival (mean)", commom_legend = T)
pU <- plot_map(map = map, obj = netSur, t = which(time == 1), summary = "U", title = "Net Survival (.975)", commom_legend = T)
grid.arrange(pL, pM, pU, nrow = 1, ncol = 3)
par(family = 'LM Roman 10', mfrow = c(1, 1))
plot_all_regions(time = time, obj = excHaz, N_reg = N_reg, ylab = "Excess Hazard", dist = dist, return_values = T)
plot_all_regions(time = time, obj = netSur, N_reg = N_reg, dist = dist, return_values = T)
which(time == 1)
time[40]
par(family = 'LM Roman 10', mfrow = c(1, 3))
pL <- plot_map(map = map, obj = netSur, t = which(time == 1), summary = "L", title = "Net Survival (.025)", commom_legend = T)
pM <- plot_map(map = map, obj = netSur, t = which(time == 1), summary = "M", title = "Net Survival (mean)", commom_legend = T)
pU <- plot_map(map = map, obj = netSur, t = which(time == 1), summary = "U", title = "Net Survival (.975)", commom_legend = T)
grid.arrange(pL, pM, pU, nrow = 1, ncol = 3)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map, sf = T)
model <- "GG_ABXZ"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("age", "wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
r <- fit_stan(data = d, model = model, max_treedepth = 12)
print(r$fit, pars = c("log_lik", "u_tilde", "u", "v_tilde", "v"), include = F)
# pairs(x = r$fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
# traceplot(object = r$fit, pars = c("log_lik", "energy__", "lp__", "v", "v_tilde", "u", "u_tilde"), include = F)
r$time_taken
saveRDS(object = r, file = paste("FITTED_MODELS/", dist, "/", model, ".rds", sep = ""))
# Bayes Factor
bridge <- bridge_sampler(samples = r$fit, cores = getOption(x = "mc.cores", default = detectCores()), silent = T)
saveRDS(object = bridge, file = paste("FITTED_MODELS/", dist, "/bridge_", model, ".rds", sep = ""))
bridge <- bridge_sampler(samples = r$fit, cores = getOption(x = "mc.cores", default = detectCores()), silent = T)
saveRDS(object = bridge, file = paste("FITTED_MODELS/", dist, "/bridge_", model, ".rds", sep = ""))
2.977684*60
r$model
0.5 ^ -1
library("igraph")
make_full_graph(6)
class(make_full_graph(6))
as_adjacency_matrix
?as_adjacency_matrix
class(make_full_graph(6))
a<- make_full_graph(6)
a
plot(a)
a<- make_connected_graph(6)
make_undirected_graph(edges = list())
?make_undirected_graph
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
plot(make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE))
make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
library("graphsim")
install.packages("graphsim")
library("graphsim")
generate_expression(n = 10)
generate_expression(n = 10, graph = a)
?generate_expression
?sample_k_regular
?sample_asym_pref
sample_pref(nodes = 10, types = 1)
plot(sample_pref(nodes = 10, types = 1))
plot(sample_pref(nodes = 10, types = 1))
plot(sample_pref(nodes = 10, types = 1))
degree(sample_pref(nodes = 10, types = 1))
degree(sample_pref(nodes = 10, types = 1))
degree(sample_pref(nodes = 10, types = 1))
degree(sample_assym_pref(nodes = 10, types = 1))
degree(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_asym_pref(nodes = 10, types = 1))
plot(sample_pref(nodes = 10, types = 1))
plot(sample_pref(nodes = 10, types = 1))
degree(sample_pref(nodes = 10, types = 10, runif(10)))
plot((sample_pref(nodes = 10, types = 10, runif(10))))
plot((sample_pref(nodes = 10, types = 10, runif(10))))
plot((sample_pref(nodes = 10, types = 10, runif(10))))
plot((sample_pref(nodes = 10, types = 10, runif(10))))
plot((sample_pref(nodes = 10, types = 10, runif(10))))
plot((sample_pref(nodes = 10, types = 10, runif(10))))
?sample_degseq
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
rbinom(10, n = 2, prob = 0.5)
?sample
?sample_degseq
sample_degseq(out.deg = sample(x = seq(from = 1, to = 10), size = 10), method = "vl")
sample(x = seq(from = 1, to = 10), size = 10)
sample_degseq(out.deg = sample(x = seq(from = 1, to = 3), size = 10), method = "vl")
seq(from = 1, to = 3), size = 10)
sample(x = seq(from = 1, to = 3), size = 10)
sample_degseq(out.deg = sample(x = seq(from = 1, to = 3), size = 10, replace = TRUE), method = "vl")
sample(x = seq(from = 1, to = 3), size = 10, replace = TRUE)
degs <- sample(1:100, 100, replace=TRUE, prob=exp(-0.5*(1:100)))
if (sum(degs) %% 2 != 0) { degs[1] <- degs[1] + 1 }
g4 <- sample_degseq(degs, method="vl")
all(degree(g4) == degs)
plot(degs)
plot(g4)
degs <- sample(1:10, 10, replace=TRUE, prob=exp(-0.5*(1:100)))
degs <- sample(1:10, 10, replace=TRUE, prob=exp(-0.5*(1:10)))
if (sum(degs) %% 2 != 0) { degs[1] <- degs[1] + 1 }
g4 <- sample_degseq(degs, method="vl")
all(degree(g4) == degs)
plot(g4)
degs <- sample(1:10, 10, replace=TRUE, prob=exp(-0.5*(1:10)))
if (sum(degs) %% 2 != 0) { degs[1] <- degs[1] + 1 }
g4 <- sample_degseq(degs, method="vl")
all(degree(g4) == degs)
plot(g4)
degs <- sample(5:10, 10, replace=TRUE, prob=exp(-0.5*(1:10)))
if (sum(degs) %% 2 != 0) { degs[1] <- degs[1] + 1 }
g4 <- sample_degseq(degs, method="vl")
all(degree(g4) == degs)
plot(g4)
degs <- sample(9:10, 10, replace=TRUE, prob=exp(-0.5*(1:10)))
if (sum(degs) %% 2 != 0) { degs[1] <- degs[1] + 1 }
degs <- sample(9:10, 10, replace=TRUE, prob=exp(-0.5*(1:10)))
degs <- sample(5:10, 10, replace=TRUE, prob=exp(-0.5*(1:10)))
is.matrix(matrix(matrix(NA, 2, 2)))
?nb2mat
library(INLA)
?nb2mat
source("header.R")
?nb2mat
library("msm")
install.packages("msm")
library("msm")
library("devtools")
devtools::install_github('chjackson/msm')
library("msm")
devtools::install_github('chjackson/msm')
source("header.R")
fit_stan
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map, sf = T)
model <- "LN_ABST"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("age", "wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
m <- compile_model(model = model)
library(SimLT)
