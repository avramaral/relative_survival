re_tilde <- re_per_ind(re = fitted_data$u_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$u[i, ], region = j)
} else if (model %in% c("ABYZ", "ABXZ", "ABYY", "ABZZ", "XBXZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
re_tilde <- re_per_ind(re = fitted_data$convolved_re_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$convolved_re[i, ], region = j)
} else {
re_tilde <- 0
re       <- 0
}
if (model %in% c("ABCC", "ABDD", "AACC", "AADD", "BBCC", "BBDD", "ABSS", "ABTT", "AASS", "AATT", "BBSS", "BBTT", "ABYY", "ABZZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
lp_re_tilde <- add_re_aux(lp = lp_tilde, random_effect = re)
lp_re       <- add_re_aux(lp = lp, random_effect = re)
} else {
lp_re_tilde <- add_re_aux(lp = lp_tilde, random_effect = re_tilde)
lp_re       <- add_re_aux(lp = lp, random_effect = re)
}
list(lp_re_tilde = lp_re_tilde, lp_re = lp_re)
}
# Visualization
plot_chains <- function (par, chains, iter, warmup) {
n_iter <- (iter - warmup)
plot(x = NA, xlim = c(1, n_iter), ylim = c(min(par), max(par)), xlab = "Iterations", ylab = "Parameter")
for (i in 1:chains) {
lines(x = par[((i - 1) * n_iter + 1):(n_iter * i)], col = i)
}
legend(x = "bottomright", inset = 0, legend = paste("Chain ", sprintf('%02d', c(1:chains)), sep = ""), col = 1:chains, lty = 1, box.lty = 1, cex = 0.75)
p <- recordPlot()
p
}
plot_summary_curve <- function (time, obj, region = 1, ylab = "Net Survival", dist = "PGW", return_values = F, ...) {
M <- apply(X = obj[, , region], MARGIN = c(1), FUN = mean)
L <- apply(X = obj[, , region], MARGIN = c(1), FUN = quantile, prob = c(0.025))
U <- apply(X = obj[, , region], MARGIN = c(1), FUN = quantile, prob = c(0.975))
plot(NA, xlim = c(0, max(time)), ylim = c(0, max(U)), xlab = "Time", ylab = ylab, main = ifelse(test = dim(obj)[3] != 1, yes = paste("Region ", sprintf('%02d', region), " (", dist, ")", sep = ""), no = paste("ALL (", dist, ")", sep = "")))
polygon(x = c(time, rev(time)), y = c(L, rev(U)), col = rgb(red = 0, green = 0, blue = 0, alpha = 0.1), border = F)
lines(x = time, y = M, col = rgb(red = 0.1, green = 0.1, blue = 0.1), lty = 2)
lines(x = time, y = L, col = rgb(red = 0.1, green = 0.1, blue = 0.1), lty = 1)
lines(x = time, y = U, col = rgb(red = 0.1, green = 0.1, blue = 0.1), lty = 1)
p <- recordPlot()
if (return_values) { return(list(plot = p, M = M, L = L, U = U)) }
}
plot_all_regions <- function (time, obj, N_reg, ylab = "Net Survival", dist = "PGW", pos_legend = "topright", return_values = F, ...) {
N_reg <- dim(obj)[3]
meanCurves <- apply(X = obj, MARGIN = c(1, 3), FUN = mean)
plot(NA, xlim = c(0, max(time)), ylim = c(0, max(meanCurves)), xlab = "Time", ylab = ylab, main = paste("All regions (", dist, ")", sep = ""))
for (j in 1:N_reg) {
lines(time, meanCurves[, j], col = j)
}
if (N_reg > 1) {
legend(x = pos_legend, inset = 0.01, legend = paste("Region ", sprintf('%02d', c(1:N_reg)), sep = ""), col = 1:N_reg, lty = 1, box.lty = 0, cex = 0.5)
}
p <- recordPlot()
if (return_values) { return(list(plot = p, meanCurves = meanCurves)) }
}
plot_map <- function (map, obj, t, summary = "M", title = "Net Survival", commom_legend = F, ...) {
N_reg <- length(map)
M <- c()
L <- c()
U <- c()
N_fit_reg <- dim(obj)[3]
for (i in 1:N_reg) {
M <- c(M, ifelse(test = N_fit_reg == 1, yes = mean(obj[t, , 1]), no = mean(obj[t, , i])))
L <- c(L, ifelse(test = N_fit_reg == 1, yes = quantile(obj[t, , 1], prob = c(0.025)), no = quantile(obj[t, , i], prob = c(0.025))))
U <- c(U, ifelse(test = N_fit_reg == 1, yes = quantile(obj[t, , 1], prob = c(0.975)), no = quantile(obj[t, , i], prob = c(0.975))))
}
if (summary == "M") {
value <- M
} else if (summary == "L") {
value <- L
} else if (summary == "U") {
value <- U
} else {
stop("Choose a proper summary measure.")
}
map_df <- st_as_sf(map)
map_df$id <- 1:N_reg
map_df$value <- value
if (commom_legend) {
min_legend <- min(c(M, L, U)) * 0.975
max_legend <- max(c(M, L, U)) * 1.025
} else {
min_legend <- min(map_df$value) * 0.975
max_legend <- max(map_df$value) * 1.025
}
p <- ggplot(data = map_df) +
geom_sf(aes(fill = value), color = "gray", size = 0.25) +
scale_fill_viridis(limits = c(min_legend, max_legend), name = title, option = "inferno") +
theme_bw() +
labs(x = "Longitude", y = "Latitude", title = title) +
theme(text = element_text(family = 'LM Roman 10'))
p
}
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
}
part     <- add_re_mod(fitted_data = fitted_data, model = model, lp_tilde = lp_tilde, lp = lp, i = i, j = region)
part
part$lp_re - lp_re
part$lp_re - lp
length(unique(part$lp_re - lp))
add_re_mod
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
}
part     <- add_re_mod(fitted_data = fitted_data, model = model, lp_tilde = lp_tilde, lp = lp, i = i, j = region)
length(unique(part$lp_re - lp))
length(unique(part$lp_re_tilde - lp_tilde))
(unique(part$lp_re_tilde - lp_tilde))
model
add_re_mod <- function (fitted_data, model, lp, lp_tilde, i, j, ...) {
re_per_ind <- function (re, region, ...) {
res <- c()
for (i in 1:length(region)) {
aux <- re[region[i]]
res <- c(res, aux)
}
res
}
if (model %in% c("ABCD", "ABXD", "ABCC", "ABDD", "XBXD", "AACC", "AADD", "BBCC", "BBDD")) {
re_tilde <- re_per_ind(re = fitted_data$v_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$v[i, ], region = j)
} else if (model %in% c("ABST", "ABXT", "ABSS", "ABTT", "XBXT", "AASS", "AATT", "BBSS", "BBTT")) {
re_tilde <- re_per_ind(re = fitted_data$u_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$u[i, ], region = j)
} else if (model %in% c("ABYZ", "ABXZ", "ABYY", "ABZZ", "XBXZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
re_tilde <- re_per_ind(re = fitted_data$convolved_re_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$convolved_re[i, ], region = j)
} else {
re_tilde <- 0
re       <- 0
}
if (model %in% c("ABCC", "ABDD", "AACC", "AADD", "BBCC", "BBDD", "ABSS", "ABTT", "AASS", "AATT", "BBSS", "BBTT", "ABYY", "ABZZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
lp_re_tilde <- add_re_aux(lp = lp_tilde, random_effect = re)
lp_re       <- add_re_aux(lp = lp, random_effect = re)
} else {
lp_re_tilde <- add_re_aux(lp = lp_tilde, random_effect = re_tilde)
lp_re       <- add_re_aux(lp = lp, random_effect = re)
}
list(lp_re_tilde = lp_re_tilde, lp_re = lp_re)
}
add_re_mod
add_re_aux
if (model %in% c("ABCD", "ABXD", "ABCC", "ABDD", "XBXD", "AACC", "AADD", "BBCC", "BBDD")) {
re_tilde <- re_per_ind(re = fitted_data$v_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$v[i, ], region = j)
} else if (model %in% c("ABST", "ABXT", "ABSS", "ABTT", "XBXT", "AASS", "AATT", "BBSS", "BBTT")) {
re_tilde <- re_per_ind(re = fitted_data$u_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$u[i, ], region = j)
} else if (model %in% c("ABYZ", "ABXZ", "ABYY", "ABZZ", "XBXZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
re_tilde <- re_per_ind(re = fitted_data$convolved_re_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$convolved_re[i, ], region = j)
} else {
re_tilde <- 0
re       <- 0
}
re_tilde
unique(re_tilde)
unique(region)
length(unique(region))
add_re_mod <- function (fitted_data, model, lp, lp_tilde, i, j, ...) {
re_per_ind <- function (re, region, ...) {
res <- c()
for (i in 1:length(region)) {
aux <- re[region[i]]
res <- c(res, aux)
}
res
}
if (model %in% c("ABCD", "ABXD", "ABCC", "ABDD", "XBXD", "AACC", "AADD", "BBCC", "BBDD")) {
re_tilde <- re_per_ind(re = fitted_data$v_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$v[i, ], region = j)
} else if (model %in% c("ABST", "ABXT", "ABSS", "ABTT", "XBXT", "AASS", "AATT", "BBSS", "BBTT")) {
re_tilde <- re_per_ind(re = fitted_data$u_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$u[i, ], region = j)
} else if (model %in% c("ABYZ", "ABXZ", "ABYY", "ABZZ", "XBXZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
re_tilde <- re_per_ind(re = fitted_data$convolved_re_tilde[i, ], region = j)
re       <- re_per_ind(re = fitted_data$convolved_re[i, ], region = j)
} else {
re_tilde <- 0
re       <- 0
}
if (model %in% c("ABCC", "ABDD", "AACC", "AADD", "BBCC", "BBDD", "ABSS", "ABTT", "AASS", "AATT", "BBSS", "BBTT", "ABYY", "ABZZ", "AAYY", "AAZZ", "BBYY", "BBZZ")) {
lp_re_tilde <- lp_tilde + re
lp_re       <- lp + re
} else {
lp_re_tilde <- lp_tilde + re_tilde
lp_re       <- lp + re
}
list(lp_re_tilde = lp_re_tilde, lp_re = lp_re)
}
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
}
part     <- add_re_mod(fitted_data = fitted_data, model = model, lp_tilde = lp_tilde, lp = lp, i = i, j = region)
length(unique(part$lp_re_tilde - lp_tilde))
length(unique(part$lp_re - lp))
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
}
part     <- add_re_mod(fitted_data = fitted_data, model = model, lp_tilde = lp_tilde, lp = lp, i = i, j = region)
lp_tilde <- part$lp_re_tilde
if (fix_coeff[1] == fix_coeff[2]) {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$beta[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
} else {
lp_tilde <- compute_lp(m = m_tilde, X = as.matrix(X_tilde), coeff = fitted_data$alpha[i, ])
lp       <- compute_lp(m = m, X = as.matrix(X), coeff = fitted_data$beta[i, ])
}
part     <- add_re_mod(fitted_data = fitted_data, model = model, lp_tilde = lp_tilde, lp = lp, i = i, j = region)
region[1]
fitted_data$v_tilde[i,]
lp_tilde[1]
part$lp_re_tilde[1]
part$lp_re_tilde[1] - lp_tilde[1]
0.01043058 - 0.7149296
length(round(unique(part$lp_re - lp), 3)
length(round(unique(part$lp_re - lp), 3))
length(round(unique(part$lp_re - lp), 3))
length(round(unique(part$lp_re - lp), 2))
length(round(unique(part$lp_re - lp), 1))
length((unique(round(part$lp_re, 3) - round(lp, 3))))
length((unique(round(part$lp_re, 0) - round(lp, 0))))
length(round(unique(part$lp_re - lp), 0))
round(unique(part$lp_re - lp)
,0
)
length((unique(round(part$lp_re - lp, 3))))
source("header.R")
# library("zoo")
# library("data.table")
##################################################
model <- "LN_ABCD"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- readRDS(file = paste("FITTED_MODELS/", dist, "/d_", model, ".rds", sep = ""))
r <- readRDS(file = paste("FITTED_MODELS/", dist, "/",   model, ".rds", sep = ""))
fit <- r$fit
X_tilde <- d$X_tilde
X <- d$X
if (!substring(text = model, first = c(1, 6), last = c(5, 7))[2] == "XX") {
region <- d$region
} else {
region <- NULL
}
time <- seq(from = 0.0, to = 5, by = 0.25)
##################################################
####################
# Estimated curves #
####################
res <- result_processing(fit = fit,
model = model,
time = time,
X_tilde = X_tilde,
X = X,
region = region)
excHaz    <- res$excHaz
excCumHaz <- res$excCumHaz
netSur    <- res$netSur
netSur
dim(netSur)
source("header.R")
data <- readRDS(file = "DATA/leuk.rds")
# Optional
data$age <- scale(data$age)
data$wbc <- scale(data$wbc)
data$dep <- scale(data$dep)
map <- readRDS(file = "DATA/nwengland_map.rds")
adj_info <- adj_list(map = map, sf = T)
model <- "LN_ABST"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- data_stan(data = data, model = model, cov.tilde = c("age"), cov = c("age", "wbc", "sex", "dep"), nonlinear = c(), adj_info = adj_info)
m <- compile_model(model = model)
r <- fit_stan(mod = m, data = d)
saveRDS(object = d, file = paste("FITTED_MODELS/", dist, "/d_", model, ".rds", sep = ""))
saveRDS(object = r, file = paste("FITTED_MODELS/", dist, "/",   model, ".rds", sep = ""))
# Bayes Factor
bridge <- bridge_sampler(samples = r$fit, cores = getOption(x = "mc.cores", default = detectCores()), silent = T)
saveRDS(object = bridge, file = paste("FITTED_MODELS/", dist, "/bridge_", model, ".rds", sep = ""))
source("header.R")
# library("zoo")
# library("data.table")
##################################################
model <- "LN_ABST"
dist <- gsub(pattern = "_", replacement = "", x = substring(text = model, first = c(1, 4), last = c(3, 7))[1])
d <- readRDS(file = paste("FITTED_MODELS/", dist, "/d_", model, ".rds", sep = ""))
r <- readRDS(file = paste("FITTED_MODELS/", dist, "/",   model, ".rds", sep = ""))
fit <- r$fit
X_tilde <- d$X_tilde
X <- d$X
if (!substring(text = model, first = c(1, 6), last = c(5, 7))[2] == "XX") {
region <- d$region
} else {
region <- NULL
}
time <- seq(from = 0.0, to = 5, by = 2.5)
##################################################
####################
# Estimated curves #
####################
res <- result_processing(fit = fit,
model = model,
time = time,
X_tilde = X_tilde,
X = X,
region = region)
excHaz    <- res$excHaz
excCumHaz <- res$excCumHaz
netSur    <- res$netSur
#### summarize it somehow 1043  8000 21
dim(excHaz)
region
group <- region # Example
group
group <- region # Assumes it goes from 1:N
n_cat <- length(unique(group))
i
i = 1
which(group == i)
excHaz_partial    <- excHaz[idx, , ]
idx <- which(group == i)
excHaz_partial    <- excHaz[idx, , ]
excCumHaz_partial <- excCumHaz[idx, , ]
netSur_partial    <- netSur[idx, , ]
compute_summary
group <- region # Assumes it goes from 1:N
n_cat <- length(unique(group))
excHaz_summary    <- list()
excCumHaz_summary <- list()
netSur_summary    <- list()
x <- excHaz_partial
x
x_mean <- apply(X = x, MARGIN = c(2), FUN = mean)
x_mean
x_mean <- apply(X = x, MARGIN = 3, FUN = mean)
x_mean
dim(x)
compute_summary <- function (x, ...) {
x_mean <- apply(X = x, MARGIN = 3, FUN = mean)
x_Q025 <- apply(X = x, MARGIN = 3, FUN = quantile, probs = c(0.025))
x_Q975 <- apply(X = x, MARGIN = 3, FUN = quantile, probs = c(0.975))
}
compute_summary <- function (x, ...) {
x_mean <- apply(X = x, MARGIN = 3, FUN = mean)
x_Q025 <- apply(X = x, MARGIN = 3, FUN = quantile, probs = c(0.025))
x_Q975 <- apply(X = x, MARGIN = 3, FUN = quantile, probs = c(0.975))
list(mean = x_mean, Q025 = x_Q025, Q975 = x_Q975)
}
compute_summary <- function (x, ...) {
x_mean <- apply(X = x, MARGIN = 3, FUN = mean)
x_Q025 <- apply(X = x, MARGIN = 3, FUN = quantile, probs = c(0.025))
x_Q975 <- apply(X = x, MARGIN = 3, FUN = quantile, probs = c(0.975))
list(mean = x_mean, Q025 = x_Q025, Q975 = x_Q975)
}
group <- region # Assumes it goes from 1:N
n_cat <- length(unique(group))
excHaz_summary    <- list()
excCumHaz_summary <- list()
netSur_summary    <- list()
for (i in 1:ncat) {
idx <- which(group == i)
excHaz_summary[[i]]    <- compute_summary(x = excHaz[idx, , ])
excCumHaz_summary[[i]] <- compute_summary(x = excCumHaz[idx, , ])
netSur_summary[[i]]    <- compute_summary(x = netSur[idx, , ])
}
group <- region # Assumes it goes from 1:N
n_cat <- length(unique(group))
excHaz_summary    <- list()
excCumHaz_summary <- list()
netSur_summary    <- list()
for (i in 1:n_cat) {
idx <- which(group == i)
excHaz_summary[[i]]    <- compute_summary(x = excHaz[idx, , ])
excCumHaz_summary[[i]] <- compute_summary(x = excCumHaz[idx, , ])
netSur_summary[[i]]    <- compute_summary(x = netSur[idx, , ])
}
excHaz_summary
data <- readRDS(file = "DATA/leuk.rds")
data$region
group_marginal_quantities <- function () {
excHaz_summary    <- list()
excCumHaz_summary <- list()
netSur_summary    <- list()
for (i in 1:n_cat) {
idx <- which(group == i)
excHaz_summary[[i]]    <- compute_summary(x = excHaz[idx, , ])
excCumHaz_summary[[i]] <- compute_summary(x = excCumHaz[idx, , ])
netSur_summary[[i]]    <- compute_summary(x = netSur[idx, , ])
}
list(excHaz_summary = excHaz_summary, excCumHaz_summary = excCumHaz_summary, netSur_summary = netSur_summary)
}
group_marginal_quantities <- function (group, excHaz, excCumHaz, netSur, ...) {
n_cat <- length(unique(group))
excHaz_summary    <- list()
excCumHaz_summary <- list()
netSur_summary    <- list()
for (i in 1:n_cat) {
idx <- which(group == i)
excHaz_summary[[i]]    <- compute_summary(x = excHaz[idx, , ])
excCumHaz_summary[[i]] <- compute_summary(x = excCumHaz[idx, , ])
netSur_summary[[i]]    <- compute_summary(x = netSur[idx, , ])
}
list(excHaz_summary = excHaz_summary, excCumHaz_summary = excCumHaz_summary, netSur_summary = netSur_summary)
}
group <- region # Assumes it goes from 1:N
grouped_res <- group_marginal_quantities(group = group, excHaz = excHaz, excCumHaz = excCumHaz, netSur = netSur)
group_marginal_quantities <- function (group, excHaz, excCumHaz, netSur, ...) {
n_cat <- length(unique(group))
excHaz_summary    <- list()
excCumHaz_summary <- list()
netSur_summary    <- list()
progressbar <- txtProgressBar(min = 1, max = n_cat, initial = 1)
for (i in 1:n_cat) {
idx <- which(group == i)
excHaz_summary[[i]]    <- compute_summary(x = excHaz[idx, , ])
excCumHaz_summary[[i]] <- compute_summary(x = excCumHaz[idx, , ])
netSur_summary[[i]]    <- compute_summary(x = netSur[idx, , ])
setTxtProgressBar(progressbar, i)
}
close(progressbar)
list(excHaz_summary = excHaz_summary, excCumHaz_summary = excCumHaz_summary, netSur_summary = netSur_summary)
}
group <- region # Assumes it goes from 1:N
grouped_res <- group_marginal_quantities(group = group, excHaz = excHaz, excCumHaz = excCumHaz, netSur = netSur)
grouped_res
data <- readRDS(file = "DATA/leuk.rds")
data
data <- readRDS(file = "DATA/leuk.rds")
data$extra <- sample(x = 1:10, size = nrow(data), replace = T)
data
var <- data$extra
n_categories <- length(unique(var))
paste(rep(x = name, times = n_categories), "_", 1:n_categories, sep = "")
name = "var"
paste(rep(x = name, times = n_categories), "_", 1:n_categories, sep = "")
make_dummy <- function (var, name = "var", ...) {
n_categories <- length(unique(var))
m <- matrix(0, nrow = length(var), ncol = n_categories)
for(i in 1:length(dep)) {
m[i, var[i]] <- 1
}
colnames(m) <- paste(rep(x = name, times = n_categories), "_", 1:n_categories, sep = "")
m
}
make_dummy <- function (var, name = deparse(substitute(var)), ...) {
n_categories <- length(unique(var))
m <- matrix(0, nrow = length(var), ncol = n_categories)
for(i in 1:length(dep)) {
m[i, var[i]] <- 1
}
colnames(m) <- paste(rep(x = name, times = n_categories), "_", 1:n_categories, sep = "")
m
}
aa<- make_dummy(var = var)
make_dummy <- function (var, name = deparse(substitute(var)), ...) {
n_categories <- length(unique(var))
m <- matrix(0, nrow = length(var), ncol = n_categories)
for(i in 1:length(var)) {
m[i, var[i]] <- 1
}
colnames(m) <- paste(rep(x = name, times = n_categories), "_", 1:n_categories, sep = "")
m
}
aa<- make_dummy(var = var)
var
var
aa
aa<- make_dummy(var = data$extra)
aa
str_split
?str_split
library("stringr")
str_split(string = "Andre$asd", pattern = "$")
str_split(string = c("Andre$asd"), pattern = "$")
str_split(string = "Andre asd", pattern = " ")
str_split(string = "Andre$asd", pattern = "\$")
str_split(string = "Andre$asd", pattern = "$")
str_split(string = "Andre!asd", pattern = "!")
str_split(string = "Andre!asd", pattern = "\\$")
str_split(string = "Andre$asd", pattern = "\\$")
str_split(string = "Andreasd", pattern = "\\$")
str_split(string = "Andreasd", pattern = "\\$")[[1]][2]
str_split(string = "Andreasd", pattern = "\\$")[[1]]
str_split(string = "Andre$asd", pattern = "\\$")[[1]]
tail(str_split(string = "Andre$asd", pattern = "\\$")[[1]], 1)
make_dummy <- function (var, name = tail(str_split(string = deparse(substitute(var)), pattern = "\\$")[[1]], 1), ...) {
n_categories <- length(unique(var))
m <- matrix(0, nrow = length(var), ncol = n_categories)
for(i in 1:length(var)) {
m[i, var[i]] <- 1
}
colnames(m) <- paste(rep(x = name, times = n_categories), "_", 1:n_categories, sep = "")
m
}
aa<- make_dummy(var = data$extra)
aa
aa[, -1]
adj_list
